<?php

/**
 * @file
 * Contains ead.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\file\Entity\File;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_help().
 */
function ead_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ead module.
    case 'help.page.ead':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Ingest and display EAD XML') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_presave
 */

function ead_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {


  $bundle = $entity->bundle();
  if ($bundle == 'ead_finding_aid') {
    $fid = $entity->get('field_ead')->target_id;
    $file = File::load($fid);
    libxml_use_internal_errors(TRUE);
    $xml = \simplexml_load_string(file_get_contents($file->getFileUri()));
    if (FALSE === $xml) {
      $errors = libxml_get_errors();
      echo 'Errors are ' . var_export($errors, TRUE);
      throw new \Exception('invalid XML');
    }
    $title = trim($xml->eadheader->filedesc->titlestmt->titleproper);
    $collection_title = (string) $xml->archdesc->did->unittitle[0];
    if ($collection_title) {
      $entity->set('field_collection_title', $collection_title);
    }
    $title = trim($title);
    if ($title) {
      $entity->set('title', $title);
    }
    $creator = (string) $xml->archdesc->did->origination->persname;

    if ($creator) {
      $tid = get_term_ids('person', [$creator]);
      $entity->set('field_creator', $tid[0]);
    }
    $abstract = trim(preg_replace('/\t+/', '', $xml->archdesc->did->abstract));
    if ($abstract) {
      $entity->set('field_abstract', $abstract);
    }
    $dates = [];
    foreach ($xml->archdesc->did->unitdate as $unitdate) {
      $tag = (string) $unitdate['encodinganalog'];
      $label = (string) $unitdate['label'];
      $unitdate = trim($unitdate);
      if ($tag == '245$f') {
        $dates[] = "$label $unitdate";
      }
    }
    $ead_date = $entity->get('field_ead_date');
    $ead_date->setValue(NULL);

    foreach ($dates as $date) {
      $ead_date->appendItem($date);
    }

    $control_access = [];
    foreach ($xml->xpath('//controlaccess/persname') as $person) {
      $control_access['person'][] = trim($person);
    }
    foreach ($xml->xpath('//controlaccess/genreform') as $document_type) {
      $control_access['document_types'][] = trim($document_type);
    }
    foreach ($xml->xpath('//controlaccess/corpname') as $organization) {
      $control_access['corporate_body'][] = trim($organization);
    }
    foreach ($xml->xpath('//controlaccess/subject') as $subject) {
      $control_access['subject'][] = trim($subject);
    }
    foreach ($xml->xpath('//controlaccess/geogname') as $geo_location) {
      $control_access['geo_location'][] = trim($geo_location);
    }

    foreach ($control_access as $field => $values) {
      $tids = get_term_ids($field, $values);
      $entity_field = $entity->get("field_$field");
      $entity_field->setValue(NULL);
      foreach ($tids as $tid) {
        $entity_field->appendItem($tid);
      }
    }
    \Drupal::logger('agile EAD')->notice("$title completed");
  }

}


/**
 * Implements hook_theme().
 */
function ead_theme() {
  return [
    'ead' => [
      'variables' => [
        'html' => '',
        'link' => '',
      ],
    ],
  ];
}


function get_term_ids($vid, $terms) {
  $tids = [];
  $terms = array_filter($terms);
  foreach ($terms as $term) {
    $test = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties(['name' => $term, 'vid' => $vid]);
    if (!$test) {
      $new_term = Term::create([
        'name' => $term,
        'vid' => $vid,
      ]);
      $new_term->save();
      $tids[] = $new_term->id();
    }
    else {
      $tids[] = reset($test)->id();
    }
  }
  return $tids;
}
