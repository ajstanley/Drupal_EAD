<?php

/**
 * @file
 * Contains ead.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\file\Entity\File;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_help().
 */
function ead_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ead module.
    case 'help.page.ead':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Ingest and display EAD XML') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_presave
 */

function ead_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {


  $bundle = $entity->bundle();
  if ($bundle == 'ead_finding_aid') {
    $fid = $entity->get('field_ead')->target_id;
    $file = File::load($fid);
    libxml_use_internal_errors(true);
    $xml = \simplexml_load_string(file_get_contents($file->getFileUri()));
    if (false === $xml) {
      $errors = libxml_get_errors();
      echo 'Errors are '.var_export($errors, true);
      throw new \Exception('invalid XML');
    }
    $title = (string) $xml->archdesc->did->unittitle[0];
    $title = trim($title);
    \Drupal::logger('agile EAD')->notice("$title started");
    if ($title) {
      $entity->set('title', $title);
    }
    $creator = (string) $xml->archdesc->did->origination->persname;
    if ($creator) {
      $entity->set('field_creator', $creator);
    }
    $abstract = trim(preg_replace('/\t+/', '', $xml->archdesc->did->abstract));
    if ($abstract) {
      $entity->set('field_abstract', $abstract);
    }
    $dates = [];
    foreach ($xml->archdesc->did->unitdate as $unitdate) {
      $tag = (string) $unitdate['encodinganalog'];
      $label = (string) $unitdate['label'];
      $unitdate = trim($unitdate);
      if ($tag == '245$f') {
        $dates[] = "$label $unitdate";
      }
    }
    $ead_date = $entity->get('field_ead_date');
    $ead_date->setValue(NULL);
    $unit = $xml->archdesc->controlaccess;
    if (!$unit) {
      $stop = 'here';
    }

    foreach ($dates as $date) {
      $ead_date->appendItem($date);
    }
    $control_accesses = get_object_vars($xml->archdesc->controlaccess->children());
    $vocabs = [];
    if (!is_array($control_accesses['controlaccess'])) {
      $control_accesses['controlaccess'] = [$control_accesses['controlaccess']];
    }

    foreach ($control_accesses['controlaccess'] as $cluster) {
      $props = get_object_vars($cluster);
      $keys = array_keys($props);
      $vocabs[$props[$keys[0]]] = $props[$keys[1]];
    }

    $mappings = [
      'Names:' => 'person',
      'Organizations:' => 'corporate_body',
      'Subjects:' => 'subject',
      'Places:' => 'geo_location',
      'Document Types:' => 'document_types',
      'Document types:' => 'document_types',
      'Titles:' => 'titles'
    ];
    $tags = [];

    foreach ($vocabs as $vocab => $terms) {
      if (!is_array($terms)) {
        $terms = [$terms];
      }

      $current = $mappings[trim($vocab)];
      foreach ($terms as $term) {
        $type = getType($term);
        if($type == 'object'){
          $term = (string) $term;
        }
        $term = trim(preg_replace('/\t+|\n/', ' ', $term));
        $term = preg_replace('/\s+/', ' ', $term);
        if ($current != 'person') {
          $term = trim($term, '.');
        }
        if(!$current){
          continue;
        }
        $test = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->loadByProperties(['name' => $term, 'vid' => $current]);
        if (!$test) {
          if (!$term) {
            continue;
          }
          $new_term = Term::create([
            'name' => $term,
            'vid' => $current,
          ]);
          $new_term->save();
          $tags[$current][] = $new_term->id();
        }
        else {
          $tags[$current][] = reset($test)->id();
        }
      }
    }
    foreach ($tags as $field => $values) {
      $entity_field = $entity->get("field_$field");
      $entity_field->setValue(NULL);
      foreach ($values as $value) {
        $entity_field->appendItem($value);
      }
    }
    \Drupal::logger('agile EAD')->notice("$title completed");
  }

}


/**
 * Implements hook_theme().
 */
function ead_theme() {
  return [
    'ead' => [
      'variables' => [
        'html' => '',
        'link' => '',
      ],
    ],
  ];
}
